buildscript {
    repositories {
        mavenCentral()
    }


    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
    maven {
        url "https://github.com/dwursteisen/android-quotes/raw/master/repository/"
    }
}

configurations {
    apt
    compile
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    apt 'com.googlecode.androidannotations:androidannotations:2.7.1'
    compile 'com.googlecode.androidannotations:androidannotations-api:2.7.1'
    compile 'com.google.android:analytics:3.0.0'
    compile 'com.android:gesticulate:0.1'
    compile 'com.google.code.gson:gson:2.2.4'
}



android {
    compileSdkVersion 18
    buildToolsVersion "18.0.1"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }


    applicationVariants.all {
        variant ->
            aptOutput = file("${project.buildDir}/source/apt_generated/${variant.dirName}")
            println "****************************"
            println "variant: ${variant.name}"
            println "manifest:  ${variant.processResources.manifestFile}"
            println "aptOutput:  ${aptOutput}"
            println "****************************"

            variant.javaCompile.doFirst {
                println "*** compile doFirst ${variant.name}"
                aptOutput.mkdirs()
                variant.javaCompile.options.compilerArgs += [
                        '-processorpath', configurations.apt.getAsPath(),
                        '-AandroidManifestFile=' + variant.processResources.manifestFile,
                        '-s', aptOutput
                ]
            }

    }
}
